#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Podchody.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CityGame")]
	public partial class ConnectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStation(Station instance);
    partial void UpdateStation(Station instance);
    partial void DeleteStation(Station instance);
    partial void InsertSpecialTask(SpecialTask instance);
    partial void UpdateSpecialTask(SpecialTask instance);
    partial void DeleteSpecialTask(SpecialTask instance);
    partial void InsertSpecialTaskLog(SpecialTaskLog instance);
    partial void UpdateSpecialTaskLog(SpecialTaskLog instance);
    partial void DeleteSpecialTaskLog(SpecialTaskLog instance);
    partial void InsertHintLog(HintLog instance);
    partial void UpdateHintLog(HintLog instance);
    partial void DeleteHintLog(HintLog instance);
    partial void InsertStationLog(StationLog instance);
    partial void UpdateStationLog(StationLog instance);
    partial void DeleteStationLog(StationLog instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public ConnectionDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CityGameConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ConnectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConnectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConnectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConnectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Station> Stations
		{
			get
			{
				return this.GetTable<Station>();
			}
		}
		
		public System.Data.Linq.Table<SpecialTask> SpecialTasks
		{
			get
			{
				return this.GetTable<SpecialTask>();
			}
		}
		
		public System.Data.Linq.Table<SpecialTaskLog> SpecialTaskLogs
		{
			get
			{
				return this.GetTable<SpecialTaskLog>();
			}
		}
		
		public System.Data.Linq.Table<HintLog> HintLogs
		{
			get
			{
				return this.GetTable<HintLog>();
			}
		}
		
		public System.Data.Linq.Table<StationLog> StationLogs
		{
			get
			{
				return this.GetTable<StationLog>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Station")]
	public partial class Station : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private int _NumberOfStation;
		
		private string _Description;
		
		private string _Hint;
		
		private string _NextPlace;
		
		private string _Location;
		
		private EntitySet<SpecialTask> _SpecialTasks;
		
		private EntitySet<HintLog> _HintLogs;
		
		private EntitySet<StationLog> _StationLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNumberOfStationChanging(int value);
    partial void OnNumberOfStationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnHintChanging(string value);
    partial void OnHintChanged();
    partial void OnNextPlaceChanging(string value);
    partial void OnNextPlaceChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public Station()
		{
			this._SpecialTasks = new EntitySet<SpecialTask>(new Action<SpecialTask>(this.attach_SpecialTasks), new Action<SpecialTask>(this.detach_SpecialTasks));
			this._HintLogs = new EntitySet<HintLog>(new Action<HintLog>(this.attach_HintLogs), new Action<HintLog>(this.detach_HintLogs));
			this._StationLogs = new EntitySet<StationLog>(new Action<StationLog>(this.attach_StationLogs), new Action<StationLog>(this.detach_StationLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfStation", DbType="Int NOT NULL")]
		public int NumberOfStation
		{
			get
			{
				return this._NumberOfStation;
			}
			set
			{
				if ((this._NumberOfStation != value))
				{
					this.OnNumberOfStationChanging(value);
					this.SendPropertyChanging();
					this._NumberOfStation = value;
					this.SendPropertyChanged("NumberOfStation");
					this.OnNumberOfStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hint", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Hint
		{
			get
			{
				return this._Hint;
			}
			set
			{
				if ((this._Hint != value))
				{
					this.OnHintChanging(value);
					this.SendPropertyChanging();
					this._Hint = value;
					this.SendPropertyChanged("Hint");
					this.OnHintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextPlace", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string NextPlace
		{
			get
			{
				return this._NextPlace;
			}
			set
			{
				if ((this._NextPlace != value))
				{
					this.OnNextPlaceChanging(value);
					this.SendPropertyChanging();
					this._NextPlace = value;
					this.SendPropertyChanged("NextPlace");
					this.OnNextPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_SpecialTask", Storage="_SpecialTasks", ThisKey="Id", OtherKey="IdStation")]
		public EntitySet<SpecialTask> SpecialTasks
		{
			get
			{
				return this._SpecialTasks;
			}
			set
			{
				this._SpecialTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_HintLog", Storage="_HintLogs", ThisKey="Id", OtherKey="IdStation")]
		public EntitySet<HintLog> HintLogs
		{
			get
			{
				return this._HintLogs;
			}
			set
			{
				this._HintLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_StationLog", Storage="_StationLogs", ThisKey="Id", OtherKey="IdStation")]
		public EntitySet<StationLog> StationLogs
		{
			get
			{
				return this._StationLogs;
			}
			set
			{
				this._StationLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecialTasks(SpecialTask entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_SpecialTasks(SpecialTask entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
		
		private void attach_HintLogs(HintLog entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_HintLogs(HintLog entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
		
		private void attach_StationLogs(StationLog entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_StationLogs(StationLog entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialTask")]
	public partial class SpecialTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _Bonus;
		
		private string _IdStation;
		
		private int _NumberOfSpecialTask;
		
		private EntitySet<SpecialTaskLog> _SpecialTaskLogs;
		
		private EntityRef<Station> _Station;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBonusChanging(int value);
    partial void OnBonusChanged();
    partial void OnIdStationChanging(string value);
    partial void OnIdStationChanged();
    partial void OnNumberOfSpecialTaskChanging(int value);
    partial void OnNumberOfSpecialTaskChanged();
    #endregion
		
		public SpecialTask()
		{
			this._SpecialTaskLogs = new EntitySet<SpecialTaskLog>(new Action<SpecialTaskLog>(this.attach_SpecialTaskLogs), new Action<SpecialTaskLog>(this.detach_SpecialTaskLogs));
			this._Station = default(EntityRef<Station>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bonus", DbType="Int NOT NULL")]
		public int Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				if ((this._Bonus != value))
				{
					this.OnBonusChanging(value);
					this.SendPropertyChanging();
					this._Bonus = value;
					this.SendPropertyChanged("Bonus");
					this.OnBonusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStation", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string IdStation
		{
			get
			{
				return this._IdStation;
			}
			set
			{
				if ((this._IdStation != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStationChanging(value);
					this.SendPropertyChanging();
					this._IdStation = value;
					this.SendPropertyChanged("IdStation");
					this.OnIdStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfSpecialTask", DbType="Int NOT NULL")]
		public int NumberOfSpecialTask
		{
			get
			{
				return this._NumberOfSpecialTask;
			}
			set
			{
				if ((this._NumberOfSpecialTask != value))
				{
					this.OnNumberOfSpecialTaskChanging(value);
					this.SendPropertyChanging();
					this._NumberOfSpecialTask = value;
					this.SendPropertyChanged("NumberOfSpecialTask");
					this.OnNumberOfSpecialTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecialTask_SpecialTaskLog", Storage="_SpecialTaskLogs", ThisKey="Id", OtherKey="IdSpecialTask")]
		public EntitySet<SpecialTaskLog> SpecialTaskLogs
		{
			get
			{
				return this._SpecialTaskLogs;
			}
			set
			{
				this._SpecialTaskLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_SpecialTask", Storage="_Station", ThisKey="IdStation", OtherKey="Id", IsForeignKey=true)]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.SpecialTasks.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.SpecialTasks.Add(this);
						this._IdStation = value.Id;
					}
					else
					{
						this._IdStation = default(string);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecialTaskLogs(SpecialTaskLog entity)
		{
			this.SendPropertyChanging();
			entity.SpecialTask = this;
		}
		
		private void detach_SpecialTaskLogs(SpecialTaskLog entity)
		{
			this.SendPropertyChanging();
			entity.SpecialTask = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialTaskLog")]
	public partial class SpecialTaskLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _IdSpecialTask;
		
		private string _IdTeam;
		
		private System.DateTime _Time;
		
		private EntityRef<SpecialTask> _SpecialTask;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnIdSpecialTaskChanging(string value);
    partial void OnIdSpecialTaskChanged();
    partial void OnIdTeamChanging(string value);
    partial void OnIdTeamChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public SpecialTaskLog()
		{
			this._SpecialTask = default(EntityRef<SpecialTask>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSpecialTask", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string IdSpecialTask
		{
			get
			{
				return this._IdSpecialTask;
			}
			set
			{
				if ((this._IdSpecialTask != value))
				{
					if (this._SpecialTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSpecialTaskChanging(value);
					this.SendPropertyChanging();
					this._IdSpecialTask = value;
					this.SendPropertyChanged("IdSpecialTask");
					this.OnIdSpecialTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeam", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string IdTeam
		{
			get
			{
				return this._IdTeam;
			}
			set
			{
				if ((this._IdTeam != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTeamChanging(value);
					this.SendPropertyChanging();
					this._IdTeam = value;
					this.SendPropertyChanged("IdTeam");
					this.OnIdTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecialTask_SpecialTaskLog", Storage="_SpecialTask", ThisKey="IdSpecialTask", OtherKey="Id", IsForeignKey=true)]
		public SpecialTask SpecialTask
		{
			get
			{
				return this._SpecialTask.Entity;
			}
			set
			{
				SpecialTask previousValue = this._SpecialTask.Entity;
				if (((previousValue != value) 
							|| (this._SpecialTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecialTask.Entity = null;
						previousValue.SpecialTaskLogs.Remove(this);
					}
					this._SpecialTask.Entity = value;
					if ((value != null))
					{
						value.SpecialTaskLogs.Add(this);
						this._IdSpecialTask = value.Id;
					}
					else
					{
						this._IdSpecialTask = default(string);
					}
					this.SendPropertyChanged("SpecialTask");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_SpecialTaskLog", Storage="_Team", ThisKey="IdTeam", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.SpecialTaskLogs.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.SpecialTaskLogs.Add(this);
						this._IdTeam = value.Id;
					}
					else
					{
						this._IdTeam = default(string);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HintLog")]
	public partial class HintLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _IdTeam;
		
		private string _IdStation;
		
		private bool _Hint;
		
		private bool _NextPlace;
		
		private System.DateTime _Time;
		
		private EntityRef<Station> _Station;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnIdTeamChanging(string value);
    partial void OnIdTeamChanged();
    partial void OnIdStationChanging(string value);
    partial void OnIdStationChanged();
    partial void OnHintChanging(bool value);
    partial void OnHintChanged();
    partial void OnNextPlaceChanging(bool value);
    partial void OnNextPlaceChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public HintLog()
		{
			this._Station = default(EntityRef<Station>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeam", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string IdTeam
		{
			get
			{
				return this._IdTeam;
			}
			set
			{
				if ((this._IdTeam != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTeamChanging(value);
					this.SendPropertyChanging();
					this._IdTeam = value;
					this.SendPropertyChanged("IdTeam");
					this.OnIdTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStation", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string IdStation
		{
			get
			{
				return this._IdStation;
			}
			set
			{
				if ((this._IdStation != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStationChanging(value);
					this.SendPropertyChanging();
					this._IdStation = value;
					this.SendPropertyChanged("IdStation");
					this.OnIdStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hint", DbType="Bit NOT NULL")]
		public bool Hint
		{
			get
			{
				return this._Hint;
			}
			set
			{
				if ((this._Hint != value))
				{
					this.OnHintChanging(value);
					this.SendPropertyChanging();
					this._Hint = value;
					this.SendPropertyChanged("Hint");
					this.OnHintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextPlace", DbType="Bit NOT NULL")]
		public bool NextPlace
		{
			get
			{
				return this._NextPlace;
			}
			set
			{
				if ((this._NextPlace != value))
				{
					this.OnNextPlaceChanging(value);
					this.SendPropertyChanging();
					this._NextPlace = value;
					this.SendPropertyChanged("NextPlace");
					this.OnNextPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_HintLog", Storage="_Station", ThisKey="IdStation", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.HintLogs.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.HintLogs.Add(this);
						this._IdStation = value.Id;
					}
					else
					{
						this._IdStation = default(string);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_HintLog", Storage="_Team", ThisKey="IdTeam", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.HintLogs.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.HintLogs.Add(this);
						this._IdTeam = value.Id;
					}
					else
					{
						this._IdTeam = default(string);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StationLog")]
	public partial class StationLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _IdStation;
		
		private string _IdTeam;
		
		private System.DateTime _Time;
		
		private EntityRef<Station> _Station;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnIdStationChanging(string value);
    partial void OnIdStationChanged();
    partial void OnIdTeamChanging(string value);
    partial void OnIdTeamChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public StationLog()
		{
			this._Station = default(EntityRef<Station>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStation", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string IdStation
		{
			get
			{
				return this._IdStation;
			}
			set
			{
				if ((this._IdStation != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStationChanging(value);
					this.SendPropertyChanging();
					this._IdStation = value;
					this.SendPropertyChanged("IdStation");
					this.OnIdStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeam", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string IdTeam
		{
			get
			{
				return this._IdTeam;
			}
			set
			{
				if ((this._IdTeam != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTeamChanging(value);
					this.SendPropertyChanging();
					this._IdTeam = value;
					this.SendPropertyChanged("IdTeam");
					this.OnIdTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_StationLog", Storage="_Station", ThisKey="IdStation", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.StationLogs.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.StationLogs.Add(this);
						this._IdStation = value.Id;
					}
					else
					{
						this._IdStation = default(string);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_StationLog", Storage="_Team", ThisKey="IdTeam", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.StationLogs.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.StationLogs.Add(this);
						this._IdTeam = value.Id;
					}
					else
					{
						this._IdTeam = default(string);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _FinishTime;
		
		private int _AmountHint;
		
		private int _AmountNextPlace;
		
		private int _CurrentStation;
		
		private int _Points;
		
		private EntitySet<SpecialTaskLog> _SpecialTaskLogs;
		
		private EntitySet<HintLog> _HintLogs;
		
		private EntitySet<StationLog> _StationLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnFinishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishTimeChanged();
    partial void OnAmountHintChanging(int value);
    partial void OnAmountHintChanged();
    partial void OnAmountNextPlaceChanging(int value);
    partial void OnAmountNextPlaceChanged();
    partial void OnCurrentStationChanging(int value);
    partial void OnCurrentStationChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public Team()
		{
			this._SpecialTaskLogs = new EntitySet<SpecialTaskLog>(new Action<SpecialTaskLog>(this.attach_SpecialTaskLogs), new Action<SpecialTaskLog>(this.detach_SpecialTaskLogs));
			this._HintLogs = new EntitySet<HintLog>(new Action<HintLog>(this.attach_HintLogs), new Action<HintLog>(this.detach_HintLogs));
			this._StationLogs = new EntitySet<StationLog>(new Action<StationLog>(this.attach_StationLogs), new Action<StationLog>(this.detach_StationLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishTime
		{
			get
			{
				return this._FinishTime;
			}
			set
			{
				if ((this._FinishTime != value))
				{
					this.OnFinishTimeChanging(value);
					this.SendPropertyChanging();
					this._FinishTime = value;
					this.SendPropertyChanged("FinishTime");
					this.OnFinishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountHint", DbType="Int NOT NULL")]
		public int AmountHint
		{
			get
			{
				return this._AmountHint;
			}
			set
			{
				if ((this._AmountHint != value))
				{
					this.OnAmountHintChanging(value);
					this.SendPropertyChanging();
					this._AmountHint = value;
					this.SendPropertyChanged("AmountHint");
					this.OnAmountHintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountNextPlace", DbType="Int NOT NULL")]
		public int AmountNextPlace
		{
			get
			{
				return this._AmountNextPlace;
			}
			set
			{
				if ((this._AmountNextPlace != value))
				{
					this.OnAmountNextPlaceChanging(value);
					this.SendPropertyChanging();
					this._AmountNextPlace = value;
					this.SendPropertyChanged("AmountNextPlace");
					this.OnAmountNextPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentStation", DbType="Int NOT NULL")]
		public int CurrentStation
		{
			get
			{
				return this._CurrentStation;
			}
			set
			{
				if ((this._CurrentStation != value))
				{
					this.OnCurrentStationChanging(value);
					this.SendPropertyChanging();
					this._CurrentStation = value;
					this.SendPropertyChanged("CurrentStation");
					this.OnCurrentStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_SpecialTaskLog", Storage="_SpecialTaskLogs", ThisKey="Id", OtherKey="IdTeam")]
		public EntitySet<SpecialTaskLog> SpecialTaskLogs
		{
			get
			{
				return this._SpecialTaskLogs;
			}
			set
			{
				this._SpecialTaskLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_HintLog", Storage="_HintLogs", ThisKey="Id", OtherKey="IdTeam")]
		public EntitySet<HintLog> HintLogs
		{
			get
			{
				return this._HintLogs;
			}
			set
			{
				this._HintLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_StationLog", Storage="_StationLogs", ThisKey="Id", OtherKey="IdTeam")]
		public EntitySet<StationLog> StationLogs
		{
			get
			{
				return this._StationLogs;
			}
			set
			{
				this._StationLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecialTaskLogs(SpecialTaskLog entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_SpecialTaskLogs(SpecialTaskLog entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_HintLogs(HintLog entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_HintLogs(HintLog entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_StationLogs(StationLog entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_StationLogs(StationLog entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
}
#pragma warning restore 1591
